========基础
  subsection 在linux下的操作
　　在终端输入

    刚刚开始复习 Python 就遇到一个很不可思议的问题，help(pow) 令我大吃一惊。干嘛要在里面加入一个取模的命令呢？

    Python 用 / 作普通除法，用 // 作整数除法，为什么对模及整数除这么感兴趣呢？

    数字前面加 0 表示 8 进制，前面加 0x 表示 16 进制，说实话，不是看到的话，我还很难想起来。

    使用 input 把一个数字赋给 x ，得到的不是一个数，而是一个字符串。如果想得到数，可以使用 n=int(input(*)).

    print r'C:\nowhere' 不知道在 3.x 中该怎么替代它

>>> ord('中')
20013
>>> chr(48)
'0'

#10进制转为2进制
>>> bin(10)
'0b1010'

#2进制转为10进制
>>> int("1001",2)
9

#10进制转为16进制
>>> hex(10)
'0xa'

#10进制到8进制
>>> oct(8)
'010' 

#2进制到16进制
>>> hex(0b1001)
'0x9'


如果知道字符的整数编码，还可以用十六进制这么写str：
>>> '\u4e2d\u6587'
'中文'



常见的占位符有：
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数
>>> 'Hello, %s' % 'world'
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'

其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
>>> '%2d,%03d' % (3,1)
' 3,001'
>>> '%.2f' % 3.1415926
'3.14'

如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'

用%%来表示一个%：


>>> s=set([1,1,2,2,3,3])
>>> s
{1,2,3}
>>> s.add(4)
>>> s.remove(4)

>>> s1=set([1,2,3])
>>> s2=set([2,3,4])
>>> s1 & s2
{2,3}
>>> s1 | s2
{1,2,3,4}




========序列
    序列的索引用 0 表示第一个元素，用 1 表示第二个元素，用 -1 表示最后一个元素。好像一个咬着自己尾巴的蛇一样。

    令 x=[1,2,3,4,5,6], y=x ，这样做只是把 x 和 y 指向了同一个地址，修改 x 的同时也会修改 y ，如果想把 x 的值真正地赋给 y ，需用 y=x[:]

[x for x in range(1,10) if not [y for y in range(2,x) if x%y==0]]





