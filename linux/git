
创建git仓库	$ git init	在当前目录中初始化一个git仓库
git至简, 因为创建目录是容易的, 所以git只是只把已有的目录变为git仓库

添加		$ git add <filename>
或		$ git add *
添加所有修改文件	$ git add .
提交		$ git commit -m "附注信息"
git至简, 其中没有新建文件的命令, 只把已有的文件加进来.



查看未提交的更改	$ git status
比较工作区和暂存区	$ git diff

当前版本		HEAD
上一个版本	HEAD^
上上一个版本	HEAD^^
往前100个版本	HEAD~100。

查看提交日志	$ git log 
或简单查看	$ git log --pretty=oneline
查看命令日志	$ git reflog


撤回之一		$ git checkout -- file	用暂存区或版本库(若暂存区无)覆盖工作区
撤回之二		$ git reset HEAD file	用版本库覆盖暂存区
撤回之三		$ git reset --hard HEAD^ 	修改HEAD指针
或		$ git reset --hard 3628164  	使用序列号修改



克隆远程版本库	$ git clone <版本库的网址>
指定目录		$ git clone <版本库的网址> <本地目录名>

git clone支持的协议
http		http[s]://example.com/path/to/repo.git/
ssh		ssh://example.com/path/to/repo.git/
git		git://example.com/path/to/repo.git/
或		git@github.com:path/to/repo.git/
		/opt/git/project.git 
		file:///opt/git/project.git
ftp		ftp[s]://example.com/path/to/repo.git/
		rsync://example.com/path/to/repo.git/
	    	

列出所有远程主机 	$ git remote
或加上地址	$ git remote -v
克隆版本库时，远程主机自动命名为origin。用-o选项指定其它名字。
    		$ git clone -o <主机名> <网址>
显示主机信息    	$ git remote show <主机名>
添加主机    	$ git remote add <主机名> <网址>
删除主机    	$ git remote rm <主机名>
重命名主机    	$ git remote rename <原主机名> <新主机名>



取回更新    	$ git fetch <远程主机名>
或指定分枝	$ git fetch <远程主机名> <分支名>
!所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。
用更新建新分枝   	$ git checkout -b newBrach origin/master
在本地分支上合并远程分支
	    	$ git merge origin/master
或    		$ git rebase origin/master



取回远程主机某个分支的更新，再与本地的指定分支合并
    		$ git pull <远程主机名> <远程分支名>:<本地分支名>	
与当前分支合并	$ git pull <远程主机名> <远程分支名>
或执行下面两个命令
		$ git fetch <远程主机名> <远程分支名>
		$ git merge <远程主机名>/<远程分支名>



如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
    		$ git pull origin
如果当前分支只有一个追踪分支，连远程主机名都可以省略。
    		$ git pull



将本地分支的更新，推送到远程主机
    		$ git push <远程主机名> <本地分支名>:<远程分支名>
如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。
    		$ git push origin master
如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
        	$ git push origin :master
如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
    		$ git push origin
如果当前分支只有一个追踪分支，那么主机名都可以省略。
    		$ git push
如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。
    		$ git push -u origin master
还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。
		$ git push --all origin
最后，git push不会推送标签（tag），除非使用--tags选项。
		$ git push origin --tags

Git鼓励大量使用分支
查看分支		git branch
创建分支		git branch <name>
切换分支		git checkout <name>
创建+切换分支	git checkout -b <name>
合并到当前分支	git merge <name>
删除分支		git branch -d <name>

查看远程分支	$ git branch -r
查看远程所有分支	$ git branch -a

在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。Git也允许手动建立追踪关系。
    		$ git branch --set-upstream master origin/next


解决中文文件名乱码问题
运行
$ git config --global core.quotepath false



























